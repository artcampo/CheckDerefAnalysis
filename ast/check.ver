int main(){
  int* p;
  int a;
  if(p) {
    int c;
  }
  if(!p){
    int d;
  }
  p ? a = 1 : a = 2;
}NullPtrCheckAfterDereference,
CFG: 
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: [B4.3] ? [B2.2] : [B3.2]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: a
   2: [B2.1] = 1
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: a
   2: [B3.1] = 2
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: [B4.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.3] ? ... : ...
   Preds (2): B5 B6
   Succs (2): B2 B3

 [B5]
   1: int d;
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: p
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: [B6.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   4: ![B6.3]
   T: if [B6.4]
   Preds (2): B7 B8
   Succs (2): B5 B4

 [B7]
   1: int c;
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: int *p;
   2: int a;
   3: p
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int *)
   5: [B8.4] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B8.5]
   Preds (1): B9
   Succs (2): B7 B6

 [B0 (EXIT)]
   Preds (1): B1


Enqeue block with ID=9
Block with ID=9
Block with ID=8
Block with ID=7
Block with ID=6
Block with ID=5
Block with ID=4
Block with ID=3
Block with ID=2
Block with ID=1
Block with ID=0
TranslationUnitDecl  <<invalid sloc>> <invalid sloc>
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType  '__int128'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType  'unsigned __int128'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType  'struct __NSConstantString_tag'
|   `-CXXRecord  '__NSConstantString_tag'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType  'char *'
|   `-BuiltinType  'char'
|-TypedefDecl  <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType  'struct __va_list_tag [1]' 1 
|   `-RecordType  'struct __va_list_tag'
|     `-CXXRecord  '__va_list_tag'
`-FunctionDecl  <check.cpp:1:1, line:11:1> line:1:5 main 'int (void)'
  `-CompoundStmt  <col:11, line:11:1>
    |-DeclStmt  <line:2:3, col:9>
    | `-VarDecl  <col:3, col:8> col:8 used p 'int *'
    |-DeclStmt  <line:3:3, col:8>
    | `-VarDecl  <col:3, col:7> col:7 used a 'int'
    |-IfStmt  <line:4:3, line:6:3>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-ImplicitCastExpr  <line:4:6> '_Bool' <PointerToBoolean>
    | | `-ImplicitCastExpr  <col:6> 'int *' <LValueToRValue>
    | |   `-DeclRefExpr  <col:6> 'int *' lvalue Var  'p' 'int *'
    | |-CompoundStmt  <col:9, line:6:3>
    | | `-DeclStmt  <line:5:5, col:10>
    | |   `-VarDecl  <col:5, col:9> col:9 c 'int'
    | `-<<<NULL>>>
    |-IfStmt  <line:7:3, line:9:3>
    | |-<<<NULL>>>
    | |-<<<NULL>>>
    | |-UnaryOperator  <line:7:6, col:7> '_Bool' prefix '!'
    | | `-ImplicitCastExpr  <col:7> '_Bool' <PointerToBoolean>
    | |   `-ImplicitCastExpr  <col:7> 'int *' <LValueToRValue>
    | |     `-DeclRefExpr  <col:7> 'int *' lvalue Var  'p' 'int *'
    | |-CompoundStmt  <col:9, line:9:3>
    | | `-DeclStmt  <line:8:5, col:10>
    | |   `-VarDecl  <col:5, col:9> col:9 d 'int'
    | `-<<<NULL>>>
    `-ConditionalOperator  <line:10:3, col:19> 'int' lvalue
      |-ImplicitCastExpr  <col:3> '_Bool' <PointerToBoolean>
      | `-ImplicitCastExpr  <col:3> 'int *' <LValueToRValue>
      |   `-DeclRefExpr  <col:3> 'int *' lvalue Var  'p' 'int *'
      |-BinaryOperator  <col:7, col:11> 'int' lvalue '='
      | |-DeclRefExpr  <col:7> 'int' lvalue Var  'a' 'int'
      | `-IntegerLiteral  <col:11> 'int' 1
      `-BinaryOperator  <col:15, col:19> 'int' lvalue '='
        |-DeclRefExpr  <col:15> 'int' lvalue Var  'a' 'int'
        `-IntegerLiteral  <col:19> 'int' 2
