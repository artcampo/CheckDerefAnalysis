NullPtrCheckAfterDereference,
CFG: 
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: int c;
   2: int *p;
   3: c
   4: &[B1.3]
   5: p
   6: [B1.5] = [B1.4]
   7: p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int *)
   9: *[B1.8]
  10: [B1.9] = 1
  11: c
  12: [B1.11] = 2
  13: p
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int *)
  15: *[B1.14]
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: 3 + [B1.16]
  18: [B1.17] + 4
  19: c
  20: [B1.19] = [B1.18]
  21: return 0;
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1


Enqeue block with ID=2
Block with ID=2
Block with ID=1
Binary: BinaryOperator  'int *' lvalue '='
|-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
`-UnaryOperator  'int *' prefix '&'
  `-DeclRefExpr  'int' lvalue Var  'c' 'int'

Assignment to: VarDecl  <test3.cpp:3:3, col:8> col:8 used p 'int *'

Binary: BinaryOperator  'int' lvalue '='
|-UnaryOperator  'int' lvalue prefix '*'
| `-ImplicitCastExpr  'int *' <LValueToRValue>
|   `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
`-IntegerLiteral  'int' 1

Deref on: VarDecl  <test3.cpp:3:3, col:8> col:8 used p 'int *'

Binary: BinaryOperator  'int' lvalue '='
|-DeclRefExpr  'int' lvalue Var  'c' 'int'
`-IntegerLiteral  'int' 2

Binary: BinaryOperator  'int' '+'
|-IntegerLiteral  'int' 3
`-ImplicitCastExpr  'int' <LValueToRValue>
  `-UnaryOperator  'int' lvalue prefix '*'
    `-ImplicitCastExpr  'int *' <LValueToRValue>
      `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'

Deref on: VarDecl  <test3.cpp:3:3, col:8> col:8 used p 'int *'

Binary: BinaryOperator  'int' '+'
|-BinaryOperator  'int' '+'
| |-IntegerLiteral  'int' 3
| `-ImplicitCastExpr  'int' <LValueToRValue>
|   `-UnaryOperator  'int' lvalue prefix '*'
|     `-ImplicitCastExpr  'int *' <LValueToRValue>
|       `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
`-IntegerLiteral  'int' 4

Binary: BinaryOperator  'int' lvalue '='
|-DeclRefExpr  'int' lvalue Var  'c' 'int'
`-BinaryOperator  'int' '+'
  |-BinaryOperator  'int' '+'
  | |-IntegerLiteral  'int' 3
  | `-ImplicitCastExpr  'int' <LValueToRValue>
  |   `-UnaryOperator  'int' lvalue prefix '*'
  |     `-ImplicitCastExpr  'int *' <LValueToRValue>
  |       `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
  `-IntegerLiteral  'int' 4

Block with ID=0
