int main(){
  int* p;
  int a;
  if(p) {
    int c;
  }
  if(!p){
    int d;
  }
  p ? a = 1 : a = 2;
}NullPtrCheckAfterDereference,
CFG: 
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: [B4.3] ? [B2.2] : [B3.2]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: a
   2: [B2.1] = 1
   Preds (1): B4
   Succs (1): B1

 [B3]
   1: a
   2: [B3.1] = 2
   Preds (1): B4
   Succs (1): B1

 [B4]
   1: p
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: [B4.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: [B4.3] ? ... : ...
   Preds (2): B5 B6
   Succs (2): B2 B3

 [B5]
   1: int d;
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: p
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: [B6.2] (ImplicitCastExpr, PointerToBoolean, _Bool)
   4: ![B6.3]
   T: if [B6.4]
   Preds (2): B7 B8
   Succs (2): B5 B4

 [B7]
   1: int c;
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: int *p;
   2: int a;
   3: p
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int *)
   5: [B8.4] (ImplicitCastExpr, PointerToBoolean, _Bool)
   T: if [B8.5]
   Preds (1): B9
   Succs (2): B7 B6

 [B0 (EXIT)]
   Preds (1): B1


Enqeue block with ID=9
Block with ID=9
Block with ID=8
If: IfStmt 
|-<<<NULL>>>
|-<<<NULL>>>
|-ImplicitCastExpr  '_Bool' <PointerToBoolean>
| `-ImplicitCastExpr  'int *' <LValueToRValue>
|   `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
|-CompoundStmt 
| `-DeclStmt 
|   `-VarDecl   c 'int'
`-<<<NULL>>>

Check to: VarDecl  <test_check.cpp:2:3, col:8> col:8 used p 'int *'

Block with ID=7
Block with ID=6
If: IfStmt 
|-<<<NULL>>>
|-<<<NULL>>>
|-UnaryOperator  '_Bool' prefix '!'
| `-ImplicitCastExpr  '_Bool' <PointerToBoolean>
|   `-ImplicitCastExpr  'int *' <LValueToRValue>
|     `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
|-CompoundStmt 
| `-DeclStmt 
|   `-VarDecl   d 'int'
`-<<<NULL>>>

Block with ID=5
Block with ID=4
Ternary: ConditionalOperator  'int' lvalue
|-ImplicitCastExpr  '_Bool' <PointerToBoolean>
| `-ImplicitCastExpr  'int *' <LValueToRValue>
|   `-DeclRefExpr  'int *' lvalue Var  'p' 'int *'
|-BinaryOperator  'int' lvalue '='
| |-DeclRefExpr  'int' lvalue Var  'a' 'int'
| `-IntegerLiteral  'int' 1
`-BinaryOperator  'int' lvalue '='
  |-DeclRefExpr  'int' lvalue Var  'a' 'int'
  `-IntegerLiteral  'int' 2

Check to: VarDecl  <test_check.cpp:2:3, col:8> col:8 used p 'int *'

Block with ID=3
Binary: BinaryOperator  'int' lvalue '='
|-DeclRefExpr  'int' lvalue Var  'a' 'int'
`-IntegerLiteral  'int' 2

Block with ID=2
Binary: BinaryOperator  'int' lvalue '='
|-DeclRefExpr  'int' lvalue Var  'a' 'int'
`-IntegerLiteral  'int' 1

Block with ID=1
Block with ID=0
